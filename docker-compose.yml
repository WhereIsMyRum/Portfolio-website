version: '3'

services:
    proxy:
        image: nginx:latest
        ports:
            - 80:80
            - 443:443
        volumes:
            - ./nginx/conf.d/nginx.conf:/etc/nginx/conf.d/nginx.conf
            - ./nginx/clear-cache.sh:/usr/src/scripts/clear-cache.sh
        restart: always
        depends_on:
            - frontend
            - website-api

    redis:
        image: redis:latest
        container_name: cache
        command: ["redis-server", "--appendonly", "yes"]
        restart: always


    frontend:
        build: ../frontend
        command: "npm run dev"
        volumes: 
            - ../frontend/app/:/usr/src/app/
        restart: always
        depends_on: 
            - website-api

    blog:
        build: ../weebitdevblog
        command: "npm run dev"
        volumes:
            - ../weebitdevblog/app/:/usr/src/app/
        restart: always
        depends_on:
            - website-api
        environment:
            - ROOT_URL=http://blog.docker
            - SITE_URL=https://www.piotrpolcik.pl

    website-api:
        build: ../website-api
        command: bash -c "npm install && npm run dev"
        volumes:
            - ../website-api/app/:/usr/src/
            - ../website-api/.aws/:/root/.aws/
        restart: always
        depends_on:
            - redis
            - mongo
        environment: 
            - REDIS_URL=redis://cache
            - SITE_URL=http://frontend.docker
            - BLOG_URL=http://blog.docker

    blog-api:
        build:
            context: ../blog-api
            dockerfile: ./Dockerfiles/dev/Dockerfile
        command: bash -c "nodemon --exec go run ./main.go --signal SIGTERM"
        volumes: 
            - ../blog-api/cmd/web/main.go:/go/src/cmd/web/main.go
            - ../blog-api/pkg/controllers/:/go/src/pkg/controllers/
            - ../blog-api/pkg/routers/:/go/src/pkg/routers/
            - ../blog-api/pkg/models/:/go/src/pkg/models/
            - ../blog-api/pkg/.aws/:/root/.aws/


    mongo:
        image: mongo:latest
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: example
            MONGO_INITDB_DATABASE: page
        volumes:
            - mongo-db:/data/db

    mongo-express:
        image: mongo-express:latest
        restart: always
        ports:
          - 8081:8081
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: root
            ME_CONFIG_MONGODB_ADMINPASSWORD: example

volumes:
    mongo-db:
